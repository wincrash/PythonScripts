

polyhedron(faces = [[0, 10, 1], [1, 10, 11], [1, 11, 2], [2, 11, 12], [2, 12, 3], [3, 12, 13], [3, 13, 4], [4, 13, 14], [4, 14, 5], [5, 14, 15], [5, 15, 6], [6, 15, 16], [6, 16, 7], [7, 16, 17], [7, 17, 8], [8, 17, 18], [8, 18, 9], [9, 18, 19], [0, 9, 19], [0, 19, 10], [10, 20, 11], [11, 20, 21], [11, 21, 12], [12, 21, 22], [12, 22, 13], [13, 22, 23], [13, 23, 14], [14, 23, 24], [14, 24, 15], [15, 24, 25], [15, 25, 16], [16, 25, 26], [16, 26, 17], [17, 26, 27], [17, 27, 18], [18, 27, 28], [18, 28, 19], [19, 28, 29], [10, 19, 29], [10, 29, 20], [20, 30, 21], [21, 30, 31], [21, 31, 22], [22, 31, 32], [22, 32, 23], [23, 32, 33], [23, 33, 24], [24, 33, 34], [24, 34, 25], [25, 34, 35], [25, 35, 26], [26, 35, 36], [26, 36, 27], [27, 36, 37], [27, 37, 28], [28, 37, 38], [28, 38, 29], [29, 38, 39], [20, 29, 39], [20, 39, 30], [30, 40, 31], [31, 40, 41], [31, 41, 32], [32, 41, 42], [32, 42, 33], [33, 42, 43], [33, 43, 34], [34, 43, 44], [34, 44, 35], [35, 44, 45], [35, 45, 36], [36, 45, 46], [36, 46, 37], [37, 46, 47], [37, 47, 38], [38, 47, 48], [38, 48, 39], [39, 48, 49], [30, 39, 49], [30, 49, 40], [40, 50, 41], [41, 50, 51], [41, 51, 42], [42, 51, 52], [42, 52, 43], [43, 52, 53], [43, 53, 44], [44, 53, 54], [44, 54, 45], [45, 54, 55], [45, 55, 46], [46, 55, 56], [46, 56, 47], [47, 56, 57], [47, 57, 48], [48, 57, 58], [48, 58, 49], [49, 58, 59], [40, 49, 59], [40, 59, 50], [0, 1, 2], [0, 2, 3], [0, 3, 4], [0, 4, 5], [0, 5, 6], [0, 6, 7], [0, 7, 8], [0, 8, 9], [50, 52, 51], [50, 53, 52], [50, 54, 53], [50, 55, 54], [50, 56, 55], [50, 57, 56], [50, 58, 57], [50, 59, 58]], points = [[13.4164078650, -26.8328157300, 0.0000000000], [5.4270509831, -10.8541019662, 8.8167787844], [4.1458980338, -8.2917960675, 28.5316954889], [-2.0729490169, 4.1458980338, 14.2658477444], [-10.8541019662, 21.7082039325, 17.6335575688], [-6.7082039325, 13.4164078650, 0.0000000000], [-10.8541019662, 21.7082039325, -17.6335575688], [-2.0729490169, 4.1458980338, -14.2658477444], [4.1458980338, -8.2917960675, -28.5316954889], [5.4270509831, -10.8541019662, -8.8167787844], [15.4164078650, -5.7082039325, 0.0000000000], [7.4270509831, -1.7135254916, 4.4083893922], [6.1458980338, -1.0729490169, 14.2658477444], [-0.0729490169, 2.0364745084, 7.1329238722], [-8.8541019662, 6.4270509831, 8.8167787844], [-4.7082039325, 4.3541019662, 0.0000000000], [-8.8541019662, 6.4270509831, -8.8167787844], [-0.0729490169, 2.0364745084, -7.1329238722], [6.1458980338, -1.0729490169, -14.2658477444], [7.4270509831, -1.7135254916, -4.4083893922], [14.4164078650, 8.7082039325, 0.0000000000], [6.4270509831, 4.7135254916, 4.4083893922], [5.1458980338, 4.0729490169, 14.2658477444], [-1.0729490169, 0.9635254916, 7.1329238722], [-9.8541019662, -3.4270509831, 8.8167787844], [-5.7082039325, -1.3541019662, 0.0000000000], [-9.8541019662, -3.4270509831, -8.8167787844], [-1.0729490169, 0.9635254916, -7.1329238722], [5.1458980338, 4.0729490169, -14.2658477444], [6.4270509831, 4.7135254916, -4.4083893922], [11.6066017178, -7.6066017178, 0.0000000000], [5.2904605211, -1.2904605211, 4.4083893922], [4.2776201834, -0.2776201834, 14.2658477444], [-0.6388100917, 4.6388100917, 7.1329238722], [-7.5809210423, 11.5809210423, 8.8167787844], [-4.3033008589, 8.3033008589, 0.0000000000], [-7.5809210423, 11.5809210423, -8.8167787844], [-0.6388100917, 4.6388100917, -7.1329238722], [4.2776201834, -0.2776201834, -14.2658477444], [5.2904605211, -1.2904605211, -4.4083893922], [16.4164078650, 10.7082039325, 0.0000000000], [8.4270509831, 6.7135254916, 4.4083893922], [7.1458980338, 6.0729490169, 14.2658477444], [0.9270509831, 2.9635254916, 7.1329238722], [-7.8541019662, -1.4270509831, 8.8167787844], [-3.7082039325, 0.6458980338, 0.0000000000], [-7.8541019662, -1.4270509831, -8.8167787844], [0.9270509831, 2.9635254916, -7.1329238722], [7.1458980338, 6.0729490169, -14.2658477444], [8.4270509831, 6.7135254916, -4.4083893922], [9.4868329805, 33.4604989415, 0.0000000000], [3.8375045520, 16.5125136560, 8.8167787844], [2.9315926138, 13.7947778413, 28.5316954889], [-1.4657963069, 0.6026110793, 14.2658477444], [-7.6750091040, -18.0250273121, 17.6335575688], [-4.7434164903, -9.2302494708, 0.0000000000], [-7.6750091040, -18.0250273121, -17.6335575688], [-1.4657963069, 0.6026110793, -14.2658477444], [2.9315926138, 13.7947778413, -28.5316954889], [3.8375045520, 16.5125136560, -8.8167787844]]);
/***********************************************
*********      SolidPython code:      **********
************************************************
 
#! /usr/bin/env python
# -*- coding: UTF-8 -*-
from __future__ import division
import os
import sys
import re

# Assumes SolidPython is in site-packages or elsewhwere in sys.path
from solid import *
from solid.utils import *

SEGMENTS = 48


def sinusoidal_ring(rad=25, segments=SEGMENTS):
    outline = []
    for i in range(segments):
        angle = i * 360 / segments
        x = rad * cos(radians(angle))
        y = rad * sin(radians(angle))
        z = 2 * sin(radians(angle * 6))
        outline.append(Point3(x, y, z))
    return [[0,0],[2,1],[1,2],[1,3],[3,4],[0,5]]


def star(num_points=5, outer_rad=15, dip_factor=0.5):
    star_pts = []
    for i in range(2 * num_points):
        rad = outer_rad - i % 2 * dip_factor * outer_rad
        angle = radians(360 / (2 * num_points) * i)
        star_pts.append(Point3(rad * cos(angle), rad * sin(angle), 0))
    return star_pts


def extrude_example():

    # Note the incorrect triangulation at the two ends of the path.  This
    # is because star isn't convex, and the triangulation algorithm for
    # the two end caps only works for convex shapes.
    shape = star(num_points=5)
    path = sinusoidal_ring(rad=50)

    # If scale_factors aren't included, they'll default to
    # no scaling at each step along path.  Here, let's
    # make the shape twice as big at beginning and end of the path
    scales = [1] * len(path)
    scales[0] = 2
    scales[-1] = 2

    extruded = extrude_along_path(shape_pts=shape, path_pts=path, scale_factors=scales)

    return extruded

if __name__ == '__main__':
    out_dir = sys.argv[1] if len(sys.argv) > 1 else os.curdir
    file_out = os.path.join(out_dir, 'path_extrude_example.scad')

    a = extrude_example()

    print("%(__file__)s: SCAD file written to: \n%(file_out)s" % vars())
    scad_render_to_file(a, file_out, include_orig_code=True) 
 
************************************************/
